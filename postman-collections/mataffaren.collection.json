{
	"info": {
		"_postman_id": "13ca57d0-ccb8-4995-8b8e-ca51479ec4f5",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34738095",
		"_collection_link": "https://matwillys.postman.co/workspace/MatWillys~44633eb0-d52b-4177-8544-f766a1dda592/collection/34738095-13ca57d0-ccb8-4995-8b8e-ca51479ec4f5?action=share&source=collection_link&creator=34738095"
	},
	"item": [
		{
			"name": "Products in category",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/c/kott-chark-och-fagel/palagg?size=30&page=0&sort=price-asc\n",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"c",
						"kott-chark-och-fagel",
						"palagg"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "price-asc\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Products in category Test 03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test Script\r",
							"\r",
							"// Check if the response status is 200 (Success)\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check if the response is in JSON format\r",
							"pm.test(\"Response is JSON\", function() {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Log the response body to inspect its structure (for debugging)\r",
							"pm.test(\"Log response body\", function() {\r",
							"    console.log(pm.response.json());\r",
							"});\r",
							"\r",
							"// Check if the response contains the 'results' array\r",
							"pm.test(\"Response contains 'results' array\", function() {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse).to.have.property(\"results\");\r",
							"    pm.expect(jsonResponse.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Check if each item in 'results' array contains required properties\r",
							"pm.test(\"Each item in 'results' should contain required properties\", function() {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    jsonResponse.results.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property(\"price\");\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"        pm.expect(item).to.have.property(\"image\");\r",
							"        pm.expect(item).to.have.property(\"productLine2\");\r",
							"        \r",
							"        // Check if the 'image' property has required sub-properties\r",
							"        pm.expect(item.image).to.have.property(\"url\");\r",
							"        pm.expect(item.image).to.have.property(\"imageType\");\r",
							"        pm.expect(item.image).to.have.property(\"format\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Check if 'price' is a valid number\r",
							"pm.test(\"Price should be a valid number\", function() {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    jsonResponse.results.forEach(function(item) {\r",
							"        pm.expect(item.priceValue).to.be.a(\"number\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Check if 'name' is a string\r",
							"pm.test(\"Name should be a string\", function() {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    jsonResponse.results.forEach(function(item) {\r",
							"        pm.expect(item.name).to.be.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Check if the 'productLine2' has a valid format (not empty string)\r",
							"pm.test(\"productLine2 should be a non-empty string\", function() {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    jsonResponse.results.forEach(function(item) {\r",
							"        pm.expect(item.productLine2).to.be.a(\"string\").that.is.not.empty;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/c/kott-chark-och-fagel/palagg?size=30&page=0&sort=price-asc\n",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"c",
						"kott-chark-och-fagel",
						"palagg"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "price-asc\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Category tree",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/leftMenu/categorytree",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Category tree Test 02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'id' and 'category' properties\", function () {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
							"    pm.expect(jsonResponse).to.have.property(\"category\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'children' array\", function () {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse).to.have.property(\"children\").that.is.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each child contains 'id', 'category', 'title', and 'url' properties\", function () {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    jsonResponse.children.forEach(child => {\r",
							"        pm.expect(child).to.have.property(\"id\");\r",
							"        pm.expect(child).to.have.property(\"category\");\r",
							"        pm.expect(child).to.have.property(\"title\");\r",
							"        pm.expect(child).to.have.property(\"url\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Valid property exists and is true\", function () {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse).to.have.property(\"valid\").that.is.true;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/leftMenu/categorytree",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Detail",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/axfood/rest/p/101290312_ST",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"axfood",
						"rest",
						"p",
						"101290312_ST"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Detail Test 01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains ean\", function () {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse).to.have.property(\"ean\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains name\", function () {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains price\", function () {\r",
							"    const jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse).to.have.property(\"price\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/axfood/rest/p/101290312_ST",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"axfood",
						"rest",
						"p",
						"101290312_ST"
					]
				}
			},
			"response": []
		}
	]
}